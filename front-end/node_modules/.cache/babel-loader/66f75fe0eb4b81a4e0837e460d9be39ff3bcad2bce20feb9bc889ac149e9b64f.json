{"ast":null,"code":"var _jsxFileName = \"/home/ihab/Real-Time-Fraud-Detection-System/FraudDetApp-frontend/src/components/Dashboard.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport MetricsSummary from './MetricsSummary';\nimport RealTimeChart from './RealTimeChart_1';\nimport TransactionHistory from './TransactionHistory';\nimport FraudAlerts from './FraudAlerts';\nimport TransactionDetails from './TransactionDetails';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FraudDetectionDashboard = () => {\n  _s();\n  const [predictions, setPredictions] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [selectedTransaction, setSelectedTransaction] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:8000/ws/fraud_detection/\");\n    socket.onopen = event => {\n      console.log(\"WebSocket connection opened\", event);\n      setConnectionStatus('connected');\n    };\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      console.log(\"WebSocket message received:\", data);\n\n      // Check if we have a \"message\" field (connection confirmation)\n      if (data.message) {\n        console.log(\"Connection message:\", data.message);\n        return;\n      }\n\n      // Check if we received a prediction result\n      if (data.predictions && data.transaction) {\n        console.log(\"Adding new transaction:\", data.transaction);\n        console.log(\"With prediction:\", data.predictions);\n\n        // Use functional updates to ensure state is correctly updated\n        setPredictions(prev => [...prev, data.predictions]);\n        setTransactions(prev => [...prev, data.transaction]);\n      } else if (data.prediction) {\n        // Handle the format where it's just \"prediction\" (not \"predictions\")\n        console.log(\"Adding new prediction:\", data.prediction);\n        setPredictions(prev => [...prev, data.prediction]);\n\n        // If there's transaction data available\n        if (data.transaction) {\n          setTransactions(prev => [...prev, data.transaction]);\n        }\n      }\n    };\n    socket.onerror = error => {\n      console.error(\"WebSocket error:\", error);\n      setConnectionStatus('disconnected');\n    };\n    socket.onclose = event => {\n      console.log(\"WebSocket connection closed:\", event);\n      setConnectionStatus('disconnected');\n    };\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  // Calculate metrics based on current state\n  const metrics = {\n    totalTransactions: transactions.length,\n    fraudulentTransactions: predictions.filter(p => p.xgboost === 1 || p.random_forest === 1 || p.logistic === 1).length,\n    accuracies: {\n      logistic: 0.85,\n      random_forest: 0.92,\n      xgboost: 0.95\n    }\n  };\n  const handleSelectTransaction = transaction => {\n    setSelectedTransaction(transaction);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-7xl mx-auto space-y-6 p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold\",\n        children: \"Fraud Detection Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `px-3 py-1 rounded-full text-sm font-medium ${connectionStatus === 'connected' ? 'bg-green-100 text-green-800' : connectionStatus === 'connecting' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'}`,\n        children: connectionStatus === 'connected' ? 'Connected' : connectionStatus === 'connecting' ? 'Connecting...' : 'Disconnected'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MetricsSummary, {\n      metrics: metrics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 lg:grid-cols-3 gap-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lg:col-span-2\",\n        children: /*#__PURE__*/_jsxDEV(RealTimeChart, {\n          predictions: predictions,\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FraudAlerts, {\n          transactions: transactions,\n          predictions: predictions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionHistory, {\n      transactions: transactions,\n      predictions: predictions,\n      onSelectTransaction: handleSelectTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), selectedTransaction && predictions.length > 0 && /*#__PURE__*/_jsxDEV(TransactionDetails, {\n      transaction: selectedTransaction,\n      prediction: predictions[transactions.indexOf(selectedTransaction)]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_s(FraudDetectionDashboard, \"jtMo2SKSvFtHxLT9RsIo8KLntFE=\");\n_c = FraudDetectionDashboard;\nexport default FraudDetectionDashboard;\nvar _c;\n$RefreshReg$(_c, \"FraudDetectionDashboard\");","map":{"version":3,"names":["React","useState","useEffect","MetricsSummary","RealTimeChart","TransactionHistory","FraudAlerts","TransactionDetails","jsxDEV","_jsxDEV","FraudDetectionDashboard","_s","predictions","setPredictions","transactions","setTransactions","selectedTransaction","setSelectedTransaction","connectionStatus","setConnectionStatus","socket","WebSocket","onopen","event","console","log","onmessage","data","JSON","parse","message","transaction","prev","prediction","onerror","error","onclose","close","metrics","totalTransactions","length","fraudulentTransactions","filter","p","xgboost","random_forest","logistic","accuracies","handleSelectTransaction","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSelectTransaction","indexOf","_c","$RefreshReg$"],"sources":["/home/ihab/Real-Time-Fraud-Detection-System/FraudDetApp-frontend/src/components/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MetricsSummary from './MetricsSummary';\nimport RealTimeChart from './RealTimeChart_1';\nimport TransactionHistory from './TransactionHistory';\nimport FraudAlerts from './FraudAlerts';\nimport TransactionDetails from './TransactionDetails';\nimport { Transaction, Prediction, Metrics } from '../types/types';\n\nconst FraudDetectionDashboard: React.FC = () => {\n  const [predictions, setPredictions] = useState<Prediction[]>([]);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'connecting' | 'connected' | 'disconnected'>('connecting');\n\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:8000/ws/fraud_detection/\");\n\n    socket.onopen = (event) => {\n      console.log(\"WebSocket connection opened\", event);\n      setConnectionStatus('connected');\n    };\n\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      console.log(\"WebSocket message received:\", data);\n      \n      // Check if we have a \"message\" field (connection confirmation)\n      if (data.message) {\n        console.log(\"Connection message:\", data.message);\n        return;\n      }\n      \n      // Check if we received a prediction result\n      if (data.predictions && data.transaction) {\n        console.log(\"Adding new transaction:\", data.transaction);\n        console.log(\"With prediction:\", data.predictions);\n        \n        // Use functional updates to ensure state is correctly updated\n        setPredictions(prev => [...prev, data.predictions]);\n        setTransactions(prev => [...prev, data.transaction]);\n      } else if (data.prediction) {\n        // Handle the format where it's just \"prediction\" (not \"predictions\")\n        console.log(\"Adding new prediction:\", data.prediction);\n        setPredictions(prev => [...prev, data.prediction]);\n        \n        // If there's transaction data available\n        if (data.transaction) {\n          setTransactions(prev => [...prev, data.transaction]);\n        }\n      }\n    };\n\n    socket.onerror = (error) => {\n      console.error(\"WebSocket error:\", error);\n      setConnectionStatus('disconnected');\n    };\n\n    socket.onclose = (event) => {\n      console.log(\"WebSocket connection closed:\", event);\n      setConnectionStatus('disconnected');\n    };\n\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  // Calculate metrics based on current state\n  const metrics: Metrics = {\n    totalTransactions: transactions.length,\n    fraudulentTransactions: predictions.filter(p => \n      p.xgboost === 1 || p.random_forest === 1 || p.logistic === 1\n    ).length,\n    accuracies: {\n      logistic: 0.85,\n      random_forest: 0.92,\n      xgboost: 0.95\n    }\n  };\n\n  const handleSelectTransaction = (transaction: Transaction) => {\n    setSelectedTransaction(transaction);\n  };\n\n  return (\n    <div className=\"w-full max-w-7xl mx-auto space-y-6 p-4\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">Fraud Detection Dashboard</h1>\n        <div className={`px-3 py-1 rounded-full text-sm font-medium ${\n          connectionStatus === 'connected' ? 'bg-green-100 text-green-800' :\n          connectionStatus === 'connecting' ? 'bg-yellow-100 text-yellow-800' :\n          'bg-red-100 text-red-800'\n        }`}>\n          {connectionStatus === 'connected' ? 'Connected' :\n           connectionStatus === 'connecting' ? 'Connecting...' :\n           'Disconnected'}\n        </div>\n      </div>\n      \n      <MetricsSummary metrics={metrics} />\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <RealTimeChart predictions={predictions} transactions={transactions} />\n        </div>\n        <div>\n          <FraudAlerts \n            transactions={transactions} \n            predictions={predictions} \n          />\n        </div>\n      </div>\n      \n      <TransactionHistory \n        transactions={transactions}\n        predictions={predictions}\n        onSelectTransaction={handleSelectTransaction} \n      />\n      \n      {selectedTransaction && predictions.length > 0 && (\n        <TransactionDetails \n          transaction={selectedTransaction} \n          prediction={predictions[transactions.indexOf(selectedTransaction)]} \n        />\n      )}\n    </div>\n  );\n};\n\nexport default FraudDetectionDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}