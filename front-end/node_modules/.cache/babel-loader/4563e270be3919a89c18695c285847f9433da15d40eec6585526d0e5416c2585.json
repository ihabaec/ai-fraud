{"ast":null,"code":"var _jsxFileName = \"/home/ihab/Real-Time-Fraud-Detection-System/FraudDetApp-frontend/src/components/RealTimeChart_1.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Chart } from 'react-chartjs-2';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend, zoomPlugin, annotationPlugin);\nconst RealTimeChart = ({\n  predictions,\n  transactions\n}) => {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [insights, setInsights] = useState([]);\n  useEffect(() => {\n    if (transactions.length === 0 || predictions.length === 0) return;\n\n    // Format time as 2025 date instead of using 1970 epoch\n    const formatTimeAs2025Date = timeValue => {\n      if (timeValue === undefined) return 'Unknown';\n\n      // Start date: January 1, 2025\n      const baseDate = new Date('2025-01-01T00:00:00');\n\n      // Add the seconds from the timeValue to create a date in 2025\n      const secondsInYear = 365 * 24 * 60 * 60;\n      const secondsToAdd = timeValue % secondsInYear;\n      const resultDate = new Date(baseDate.getTime() + secondsToAdd * 1000);\n      return resultDate.toLocaleTimeString();\n    };\n    const labels = transactions.map(t => t.Time ? formatTimeAs2025Date(t.Time) : `TX-${transactions.indexOf(t)}`);\n    const amounts = transactions.map(t => t.Amount || 0);\n\n    // Determine fraud status using predictions (not just Class)\n    const fraudStatus = transactions.map((_, i) => {\n      if (i < predictions.length) {\n        const pred = predictions[i];\n        return pred.logistic === 1 || pred.random_forest === 1 || pred.xgboost === 1;\n      }\n      return false;\n    });\n\n    // Identify anomalies\n    const anomalies = identifyAnomalies(amounts);\n\n    // Calculate insights\n    const newInsights = calculateInsights(transactions, predictions, fraudStatus, anomalies);\n    setInsights(newInsights);\n    setChartData({\n      labels,\n      datasets: [{\n        type: 'line',\n        label: 'Logistic Regression',\n        data: predictions.map(p => p.logistic),\n        borderColor: 'rgb(255, 99, 132)',\n        yAxisID: 'y'\n      }, {\n        type: 'line',\n        label: 'Random Forest',\n        data: predictions.map(p => p.random_forest),\n        borderColor: 'rgb(54, 162, 235)',\n        yAxisID: 'y'\n      }, {\n        type: 'line',\n        label: 'XGBoost',\n        data: predictions.map(p => p.xgboost),\n        borderColor: 'rgb(75, 192, 192)',\n        yAxisID: 'y'\n      }, {\n        type: 'bar',\n        label: 'Transaction Amount',\n        data: amounts,\n        backgroundColor: amounts.map((_, i) => fraudStatus[i] ? 'rgba(255, 99, 132, 0.5)' : anomalies[i] ? 'rgba(255, 206, 86, 0.5)' : 'rgba(75, 192, 192, 0.5)'),\n        yAxisID: 'y1'\n      }]\n    });\n  }, [predictions, transactions]);\n  const options = {\n    responsive: true,\n    interaction: {\n      mode: 'index',\n      intersect: false\n    },\n    scales: {\n      y: {\n        type: 'linear',\n        display: true,\n        position: 'left',\n        title: {\n          display: true,\n          text: 'Fraud Probability'\n        },\n        min: 0,\n        max: 1\n      },\n      y1: {\n        type: 'linear',\n        display: true,\n        position: 'right',\n        title: {\n          display: true,\n          text: 'Transaction Amount'\n        },\n        grid: {\n          drawOnChartArea: false\n        }\n      }\n    },\n    plugins: {\n      zoom: {\n        zoom: {\n          wheel: {\n            enabled: true\n          },\n          pinch: {\n            enabled: true\n          },\n          mode: 'xy'\n        },\n        pan: {\n          enabled: true,\n          mode: 'xy'\n        }\n      },\n      tooltip: {\n        callbacks: {\n          label: context => {\n            const datasetLabel = context.dataset.label;\n            const value = context.parsed.y;\n            const index = context.dataIndex;\n\n            // Safely determine fraud status\n            let fraudStatus = 'Unknown';\n            if (index < transactions.length) {\n              if (index < predictions.length) {\n                const pred = predictions[index];\n                fraudStatus = pred.logistic === 1 || pred.random_forest === 1 || pred.xgboost === 1 ? 'Fraudulent' : 'Legitimate';\n              } else if (transactions[index].Class === 1) {\n                fraudStatus = 'Fraudulent';\n              } else {\n                fraudStatus = 'Legitimate';\n              }\n            }\n            const isAnomaly = index < transactions.length ? identifyAnomalies(transactions.map(t => t.Amount || 0))[index] : false;\n            return `${datasetLabel}: ${value.toFixed(2)} (${fraudStatus}${isAnomaly ? ', Anomaly' : ''})`;\n          }\n        }\n      }\n    }\n  };\n  const identifyAnomalies = amounts => {\n    if (amounts.length === 0) return [];\n    const validAmounts = amounts.filter(amount => !isNaN(amount));\n    if (validAmounts.length === 0) return amounts.map(() => false);\n    const mean = validAmounts.reduce((sum, amount) => sum + amount, 0) / validAmounts.length;\n    const stdDev = Math.sqrt(validAmounts.reduce((sum, amount) => sum + Math.pow(amount - mean, 2), 0) / validAmounts.length);\n    const threshold = mean + 2 * stdDev; // Lower to 2 std devs to catch more anomalies\n\n    return amounts.map(amount => amount > threshold);\n  };\n  const calculateInsights = (transactions, predictions, fraudStatus, anomalies) => {\n    // Count fraudulent transactions based on predictions\n    const fraudCount = fraudStatus.filter(Boolean).length;\n    const fraudRate = transactions.length > 0 ? fraudCount / transactions.length * 100 : 0;\n\n    // Calculate average and max amounts with proper checking\n    const validAmounts = transactions.map(t => t.Amount).filter(amount => amount !== undefined && !isNaN(amount));\n    const averageAmount = validAmounts.length > 0 ? validAmounts.reduce((sum, amount) => sum + amount, 0) / validAmounts.length : 0;\n    const maxAmount = validAmounts.length > 0 ? Math.max(...validAmounts) : 0;\n    const anomalyCount = anomalies.filter(Boolean).length;\n\n    // Calculate model detection rates (not accuracies)\n    const modelDetections = {\n      logistic: predictions.filter(p => p.logistic === 1).length,\n      random_forest: predictions.filter(p => p.random_forest === 1).length,\n      xgboost: predictions.filter(p => p.xgboost === 1).length\n    };\n    const totalPredictions = predictions.length;\n    const logisticRate = totalPredictions > 0 ? modelDetections.logistic / totalPredictions * 100 : 0;\n    const rfRate = totalPredictions > 0 ? modelDetections.random_forest / totalPredictions * 100 : 0;\n    const xgboostRate = totalPredictions > 0 ? modelDetections.xgboost / totalPredictions * 100 : 0;\n    return [`Fraud Rate: ${fraudRate.toFixed(2)}%`, `Average Transaction Amount: $${averageAmount.toFixed(2)}`, `Highest Transaction Amount: $${maxAmount.toFixed(2)}`, `Anomalies Detected: ${anomalyCount} (${totalPredictions > 0 ? (anomalyCount / totalPredictions * 100).toFixed(2) : 0}%)`, `Detection Rates: Logistic (${logisticRate.toFixed(2)}%), Random Forest (${rfRate.toFixed(2)}%), XGBoost (${xgboostRate.toFixed(2)}%)`];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg shadow-md p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-lg font-semibold mb-4\",\n      children: \"Real-Time Fraud Detection\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), transactions.length === 0 || predictions.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-64 bg-gray-50 rounded\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500\",\n        children: \"Waiting for transaction data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this) : chartData ? /*#__PURE__*/_jsxDEV(Chart, {\n      type: \"bar\",\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-64 bg-gray-50 rounded\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500\",\n        children: \"Preparing chart...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-md font-semibold mb-2\",\n        children: \"Insights:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), insights.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc pl-5\",\n        children: insights.map((insight, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"text-sm text-gray-600\",\n          children: insight\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-500\",\n        children: \"No insights available yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 flex justify-between text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 bg-[rgba(75,192,192,0.5)] mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Normal Transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 bg-[rgba(255,206,86,0.5)] mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Anomaly\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-4 h-4 bg-[rgba(255,99,132,0.5)] mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Fraudulent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTimeChart, \"crjF0HbweuDKjEwd7KN2/w8yfHs=\");\n_c = RealTimeChart;\nexport default RealTimeChart;\nvar _c;\n$RefreshReg$(_c, \"RealTimeChart\");","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","zoomPlugin","annotationPlugin","jsxDEV","_jsxDEV","register","RealTimeChart","predictions","transactions","_s","chartData","setChartData","insights","setInsights","length","formatTimeAs2025Date","timeValue","undefined","baseDate","Date","secondsInYear","secondsToAdd","resultDate","getTime","toLocaleTimeString","labels","map","t","Time","indexOf","amounts","Amount","fraudStatus","_","i","pred","logistic","random_forest","xgboost","anomalies","identifyAnomalies","newInsights","calculateInsights","datasets","type","label","data","p","borderColor","yAxisID","backgroundColor","options","responsive","interaction","mode","intersect","scales","y","display","position","title","text","min","max","y1","grid","drawOnChartArea","plugins","zoom","wheel","enabled","pinch","pan","tooltip","callbacks","context","datasetLabel","dataset","value","parsed","index","dataIndex","Class","isAnomaly","toFixed","validAmounts","filter","amount","isNaN","mean","reduce","sum","stdDev","Math","sqrt","pow","threshold","fraudCount","Boolean","fraudRate","averageAmount","maxAmount","anomalyCount","modelDetections","totalPredictions","logisticRate","rfRate","xgboostRate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","insight","_c","$RefreshReg$"],"sources":["/home/ihab/Real-Time-Fraud-Detection-System/FraudDetApp-frontend/src/components/RealTimeChart_1.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Chart } from 'react-chartjs-2';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport annotationPlugin from 'chartjs-plugin-annotation';\nimport { Transaction, Prediction } from '../types/types';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  zoomPlugin,\n  annotationPlugin\n);\n\ninterface RealTimeChartProps {\n  predictions: Prediction[];\n  transactions: Transaction[];\n}\n\nconst RealTimeChart: React.FC<RealTimeChartProps> = ({ predictions, transactions }) => {\n  const [chartData, setChartData] = useState<any>(null);\n  const [insights, setInsights] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (transactions.length === 0 || predictions.length === 0) return;\n\n    // Format time as 2025 date instead of using 1970 epoch\n    const formatTimeAs2025Date = (timeValue?: number) => {\n      if (timeValue === undefined) return 'Unknown';\n      \n      // Start date: January 1, 2025\n      const baseDate = new Date('2025-01-01T00:00:00');\n      \n      // Add the seconds from the timeValue to create a date in 2025\n      const secondsInYear = 365 * 24 * 60 * 60;\n      const secondsToAdd = timeValue % secondsInYear;\n      \n      const resultDate = new Date(baseDate.getTime() + (secondsToAdd * 1000));\n      \n      return resultDate.toLocaleTimeString();\n    };\n\n    const labels = transactions.map(t => t.Time ? formatTimeAs2025Date(t.Time) : `TX-${transactions.indexOf(t)}`);\n    const amounts = transactions.map(t => t.Amount || 0);\n\n    // Determine fraud status using predictions (not just Class)\n    const fraudStatus = transactions.map((_, i) => {\n      if (i < predictions.length) {\n        const pred = predictions[i];\n        return (pred.logistic === 1 || pred.random_forest === 1 || pred.xgboost === 1);\n      }\n      return false;\n    });\n\n    // Identify anomalies\n    const anomalies = identifyAnomalies(amounts);\n\n    // Calculate insights\n    const newInsights = calculateInsights(transactions, predictions, fraudStatus, anomalies);\n    setInsights(newInsights);\n\n    setChartData({\n      labels,\n      datasets: [\n        {\n          type: 'line' as const,\n          label: 'Logistic Regression',\n          data: predictions.map(p => p.logistic),\n          borderColor: 'rgb(255, 99, 132)',\n          yAxisID: 'y',\n        },\n        {\n          type: 'line' as const,\n          label: 'Random Forest',\n          data: predictions.map(p => p.random_forest),\n          borderColor: 'rgb(54, 162, 235)',\n          yAxisID: 'y',\n        },\n        {\n          type: 'line' as const,\n          label: 'XGBoost',\n          data: predictions.map(p => p.xgboost),\n          borderColor: 'rgb(75, 192, 192)',\n          yAxisID: 'y',\n        },\n        {\n          type: 'bar' as const,\n          label: 'Transaction Amount',\n          data: amounts,\n          backgroundColor: amounts.map((_, i) => \n            fraudStatus[i] \n              ? 'rgba(255, 99, 132, 0.5)' \n              : anomalies[i] \n                ? 'rgba(255, 206, 86, 0.5)'\n                : 'rgba(75, 192, 192, 0.5)'\n          ),\n          yAxisID: 'y1',\n        },\n      ],\n    });\n  }, [predictions, transactions]);\n\n  const options = {\n    responsive: true,\n    interaction: {\n      mode: 'index' as const,\n      intersect: false,\n    },\n    scales: {\n      y: {\n        type: 'linear' as const,\n        display: true,\n        position: 'left' as const,\n        title: {\n          display: true,\n          text: 'Fraud Probability',\n        },\n        min: 0,\n        max: 1,\n      },\n      y1: {\n        type: 'linear' as const,\n        display: true,\n        position: 'right' as const,\n        title: {\n          display: true,\n          text: 'Transaction Amount',\n        },\n        grid: {\n          drawOnChartArea: false,\n        },\n      },\n    },\n    plugins: {\n      zoom: {\n        zoom: {\n          wheel: {\n            enabled: true,\n          },\n          pinch: {\n            enabled: true,\n          },\n          mode: 'xy' as const,\n        },\n        pan: {\n          enabled: true,\n          mode: 'xy' as const,\n        },\n      },\n      tooltip: {\n        callbacks: {\n          label: (context: any) => {\n            const datasetLabel = context.dataset.label;\n            const value = context.parsed.y;\n            const index = context.dataIndex;\n            \n            // Safely determine fraud status\n            let fraudStatus = 'Unknown';\n            if (index < transactions.length) {\n              if (index < predictions.length) {\n                const pred = predictions[index];\n                fraudStatus = (pred.logistic === 1 || pred.random_forest === 1 || pred.xgboost === 1) \n                  ? 'Fraudulent' : 'Legitimate';\n              } else if (transactions[index].Class === 1) {\n                fraudStatus = 'Fraudulent';\n              } else {\n                fraudStatus = 'Legitimate';\n              }\n            }\n            \n            const isAnomaly = index < transactions.length ? \n              identifyAnomalies(transactions.map(t => t.Amount || 0))[index] : false;\n              \n            return `${datasetLabel}: ${value.toFixed(2)} (${fraudStatus}${isAnomaly ? ', Anomaly' : ''})`;\n          },\n        },\n      },\n    },\n  };\n\n  const identifyAnomalies = (amounts: number[]) => {\n    if (amounts.length === 0) return [];\n    \n    const validAmounts = amounts.filter(amount => !isNaN(amount));\n    if (validAmounts.length === 0) return amounts.map(() => false);\n    \n    const mean = validAmounts.reduce((sum, amount) => sum + amount, 0) / validAmounts.length;\n    const stdDev = Math.sqrt(\n      validAmounts.reduce((sum, amount) => sum + Math.pow(amount - mean, 2), 0) / validAmounts.length\n    );\n    const threshold = mean + 2 * stdDev; // Lower to 2 std devs to catch more anomalies\n\n    return amounts.map(amount => amount > threshold);\n  };\n\n  const calculateInsights = (\n    transactions: Transaction[], \n    predictions: Prediction[], \n    fraudStatus: boolean[],\n    anomalies: boolean[]\n  ) => {\n    // Count fraudulent transactions based on predictions\n    const fraudCount = fraudStatus.filter(Boolean).length;\n    const fraudRate = transactions.length > 0 ? (fraudCount / transactions.length) * 100 : 0;\n    \n    // Calculate average and max amounts with proper checking\n    const validAmounts = transactions\n      .map(t => t.Amount)\n      .filter((amount): amount is number => amount !== undefined && !isNaN(amount));\n      \n    const averageAmount = validAmounts.length > 0 \n      ? validAmounts.reduce((sum, amount) => sum + amount, 0) / validAmounts.length \n      : 0;\n      \n    const maxAmount = validAmounts.length > 0 \n      ? Math.max(...validAmounts) \n      : 0;\n      \n    const anomalyCount = anomalies.filter(Boolean).length;\n\n    // Calculate model detection rates (not accuracies)\n    const modelDetections = {\n      logistic: predictions.filter(p => p.logistic === 1).length,\n      random_forest: predictions.filter(p => p.random_forest === 1).length,\n      xgboost: predictions.filter(p => p.xgboost === 1).length,\n    };\n    \n    const totalPredictions = predictions.length;\n    const logisticRate = totalPredictions > 0 ? (modelDetections.logistic / totalPredictions) * 100 : 0;\n    const rfRate = totalPredictions > 0 ? (modelDetections.random_forest / totalPredictions) * 100 : 0;\n    const xgboostRate = totalPredictions > 0 ? (modelDetections.xgboost / totalPredictions) * 100 : 0;\n\n    return [\n      `Fraud Rate: ${fraudRate.toFixed(2)}%`,\n      `Average Transaction Amount: $${averageAmount.toFixed(2)}`,\n      `Highest Transaction Amount: $${maxAmount.toFixed(2)}`,\n      `Anomalies Detected: ${anomalyCount} (${totalPredictions > 0 ? ((anomalyCount / totalPredictions) * 100).toFixed(2) : 0}%)`,\n      `Detection Rates: Logistic (${logisticRate.toFixed(2)}%), Random Forest (${rfRate.toFixed(2)}%), XGBoost (${xgboostRate.toFixed(2)}%)`,\n    ];\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-4\">\n      <h2 className=\"text-lg font-semibold mb-4\">Real-Time Fraud Detection</h2>\n      \n      {transactions.length === 0 || predictions.length === 0 ? (\n        <div className=\"flex items-center justify-center h-64 bg-gray-50 rounded\">\n          <p className=\"text-gray-500\">Waiting for transaction data...</p>\n        </div>\n      ) : chartData ? (\n        <Chart type=\"bar\" data={chartData} options={options} />\n      ) : (\n        <div className=\"flex items-center justify-center h-64 bg-gray-50 rounded\">\n          <p className=\"text-gray-500\">Preparing chart...</p>\n        </div>\n      )}\n      \n      <div className=\"mt-4\">\n        <h3 className=\"text-md font-semibold mb-2\">Insights:</h3>\n        {insights.length > 0 ? (\n          <ul className=\"list-disc pl-5\">\n            {insights.map((insight, index) => (\n              <li key={index} className=\"text-sm text-gray-600\">{insight}</li>\n            ))}\n          </ul>\n        ) : (\n          <p className=\"text-sm text-gray-500\">No insights available yet.</p>\n        )}\n      </div>\n      \n      <div className=\"mt-4 flex justify-between text-sm\">\n        <div className=\"flex items-center\">\n          <div className=\"w-4 h-4 bg-[rgba(75,192,192,0.5)] mr-2\"></div>\n          <span>Normal Transaction</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-4 h-4 bg-[rgba(255,206,86,0.5)] mr-2\"></div>\n          <span>Anomaly</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-4 h-4 bg-[rgba(255,99,132,0.5)] mr-2\"></div>\n          <span>Fraudulent</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RealTimeChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}